function cache_weight_features(chunk, layer, backward_type, varargin)
ip = inputParser;
ip.addRequired('chunk', @isstr);
ip.addRequired('layer', @isscalar);
ip.addRequired('backward_type', @isstr);
ip.addParamValue('do_normalize',  true,   @isscalar);
ip.addParamValue('do_lda',        true,   @isscalar);
ip.addParamValue('max_num_per_class', 5500,   @isscalar);
ip.parse(chunk, layer, backward_type, varargin{:});
opts = ip.Results;

% -------------------- CONFIG --------------------
feat_opt = struct('layer', layer, 'd', true, ...
    'w', true, 'combine', @l2, 'combine_name', 'l2', 'suf', backward_type);
cache_name  = [feat_opts_to_string(feat_opt) opts_name(opts)];
%cache_name   = feat_opts_to_string(feat_opt);
%net_file     = './data/caffe_nets/finetune_voc_2007_trainval_iter_70k';
net_file     = './data/nizf/nizf_model';
crop_mode    = 'warp';
crop_padding = 16;

VOCdevkit = './datasets/VOCdevkit2007';
imdb_train = imdb_from_voc(VOCdevkit, 'train', '2007');
imdb_val   = imdb_from_voc(VOCdevkit, 'val', '2007');
imdb_test  = imdb_from_voc(VOCdevkit, 'test', '2007');
imdb_trainval = imdb_from_voc(VOCdevkit, 'trainval', '2007');

%ends = [1094 2097 2372 3064 3339 3614 4680 length(imdb_test.image_ids)];
switch chunk
  case 'train'
    cache_features(imdb_train, feat_opt, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
    link_up_trainval(cache_name, imdb_train, imdb_trainval);
  case 'val_1'
    end_at = val_done+ceil((length(imdb_val.image_ids)-val_done)/2);
    cache_features(imdb_val, feat_opt, ...
        'start', 1, 'end', end_at, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
    link_up_trainval(cache_name, imdb_val, imdb_trainval);
  case 'val_2'
    start_at = val_done+ceil((length(imdb_val.image_ids)-val_done)/2)+1;
    cache_features(imdb_val, feat_opt, ...
        'start', start_at, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
    link_up_trainval(cache_name, imdb_val, imdb_trainval);
  case 'val'
    cache_features(imdb_val, feat_opt, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
    link_up_trainval(cache_name, imdb_val, imdb_trainval);
  case 'test'
    cache_features(imdb_test, feat_opt, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
    
  otherwise
    assert(strcmp(chunk(1:4), 'test'));
    part_id = chunk(end)-'0';
    if part_id == 1
      start_at = 1; end_at = ends(1);
    else
      start_at = ends(part_id-1)+1; 
      end_at = ends(part_id);
    end
    cache_features(imdb_test, feat_opt, ...
        'start', start_at, 'end', end_at, ...
        'crop_mode', crop_mode, ...
        'crop_padding', crop_padding, ...
        'net_file', net_file, ...
        'backward_type', backward_type, ...
        'cache_name', cache_name, ...
        'opts', opts);
end

% ------------------------------------------------------------------------
function link_up_trainval(cache_name, imdb_split, imdb_trainval)
% ------------------------------------------------------------------------
cmd = {['mkdir -p ./feat_cache/' cache_name '/' imdb_trainval.name '; '], ...
    ['cd ./feat_cache/' cache_name '/' imdb_trainval.name '/; '], ...
    ['for i in `ls -1 ../' imdb_split.name '`; '], ... 
    ['do ln -s ../' imdb_split.name '/$i $i; '], ... 
    ['done;']};
cmd = [cmd{:}];
fprintf('running:\n%s\n', cmd);
system(cmd);
fprintf('done\n');
